services:
  # reverse-proxy
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: always
    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS
      - "8080:8080"  # Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.yml:/etc/traefik/traefik.yml
      - ./certs:/etc/certs  # Mount SSL certificates
    networks:
      web:
        aliases:
          - api-gateway.kinodev.localhost
          - domain-service.kinodev.localhost
          - identity.kinodev.localhost
          - ui.kinodev.localhost
          - admin-portal.kinodev.localhost
          - payment-service.kinodev.localhost
          # - mongodb.kinodev.localhost
          - mongo-express.kinodev.localhost
          - rabbitmq.kinodev.localhost

  imageserver:
    image: nginx:alpine
    volumes:
      - E:/EDUCATION/KinoDev/KinoDev.Docker/data/movies/images:/usr/share/nginx/html:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.images.rule=Host(`images.kinodev.localhost`)"
      - "traefik.http.routers.images.entrypoints=web"
    networks:
      - web
                
  # db
  db:
    image: mysql:8.0
    container_name: kinodev-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_USER: myuser
      MYSQL_PASSWORD: mypassword
    volumes:
      - ./db-init-and-seed:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - web  

  # identity-db
  identity-db:
    image: mysql:8.0
    container_name: kinodev-identity-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_USER: myuser
      MYSQL_PASSWORD: mypassword
    volumes:
      - ./sql-init-scripts/identity-db:/docker-entrypoint-initdb.d
    ports:
      - "3307:3306"
    networks:
      - web

  # MongoDB
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongouser
      MONGO_INITDB_ROOT_PASSWORD: mongopassword
      MONGO_INITDB_DATABASE: kinodev_mongo
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-data:/data/db
    networks:
      - web

  # MongoDB Express - Web-based MongoDB admin interface
  mongo-express:
    image: mongo-express:latest
    container_name: kinodev-mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: mongouser
      ME_CONFIG_MONGODB_ADMINPASSWORD: mongopassword
      ME_CONFIG_MONGODB_URL: mongodb://mongouser:mongopassword@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: pass
    depends_on:
      - mongodb
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mongo-express.rule=Host(`mongo-express.kinodev.localhost`)"
      - "traefik.http.routers.mongo-express.entrypoints=web"
      - "traefik.http.services.mongo-express.loadbalancer.server.port=8081"
    networks:
      - web

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: kinodev-rabbitmq
    restart: always
    ports:
      - "5672:5672"    # AMQP protocol port
      - "15672:15672"  # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.kinodev.localhost`)"
      - "traefik.http.routers.rabbitmq.entrypoints=web"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
    networks:
      - web

  # api-gateway
  api-gateway:
    image: api-gateway
    container_name: api-gateway
    build:
      context: "E:/Education/KinoDev/KinoDev.ApiGateway"
      dockerfile: "E:/Education/KinoDev/KinoDev.ApiGateway/Dockerfile"
      args:
        - GITHUB_USER_NAME=${GITHUB_USER_NAME}
        - GITHUB_READ_PACKAGE_TOKEN=${GITHUB_READ_PACKAGE_TOKEN}
    env_file:
      - .env       
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - DOTNET_RUNNING_IN_CONTAINER=true
      - ASPNETCORE_URLS=http://*:80;https://*:443
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/certs/kinodev.crt
      - ASPNETCORE_Kestrel__Certificates__Default__KeyPath=/certs/kinodev.key
      - USE_SWAGGER=${UseSwagger}
      - CookieResponse__Domain=.kinodev.localhost
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=Host(`api-gateway.kinodev.localhost`)"      
      - "traefik.http.routers.api-gateway.entrypoints=websecure"
      - "traefik.http.routers.api-gateway.tls=true"
      - "traefik.http.services.api-gateway.loadbalancer.server.port=80"
    volumes:
      - ./certs:/certs:ro # Mount certs folder as read-only
    restart: always
    networks:
      - web
  
  domain-service:
    image: domain-service
    container_name: domain-service
    build:
      context: "E:/Education/KinoDev/KinoDev.DomainService"
      dockerfile: "E:/Education/KinoDev/KinoDev.DomainService/Dockerfile"
      args:
        - GITHUB_USER_NAME=${GITHUB_USER_NAME}
        - GITHUB_READ_PACKAGE_TOKEN=${GITHUB_READ_PACKAGE_TOKEN}
    env_file:
      - .env        
    environment:
    # TODO: Move to .env files
      - ASPNETCORE_ENVIRONMENT=Production
      - DOTNET_RUNNING_IN_CONTAINER=true
      - ASPNETCORE_URLS=http://*:80;https://*:443
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/certs/kinodev.crt
      - ASPNETCORE_Kestrel__Certificates__Default__KeyPath=/certs/kinodev.key
      - USE_SWAGGER=${UseSwagger}
      - ConnectionStrings__Kinodev=${ConnectionStrings__Kinodev}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.domain-service.rule=Host(`domain-service.kinodev.localhost`)"      
      - "traefik.http.routers.domain-service.entrypoints=websecure"
      - "traefik.http.routers.domain-service.tls=true"
      - "traefik.http.services.domain-service.loadbalancer.server.port=80"
    volumes:
      - ./certs:/certs:ro # Mount certs folder as read-only
    restart: always
    networks:
      - web

  payment-service:
    image: payment-service
    container_name: payment-service
    build:
      context: "E:/Education/KinoDev/KinoDev.Payment"
      dockerfile: "E:/Education/KinoDev/KinoDev.Payment/Dockerfile"
      args:
        - GITHUB_USER_NAME=${GITHUB_USER_NAME}
        - GITHUB_READ_PACKAGE_TOKEN=${GITHUB_READ_PACKAGE_TOKEN}  
    env_file:
      - .env        
    environment:
    # TODO: Move to .env files
      - ASPNETCORE_ENVIRONMENT=Production
      - DOTNET_RUNNING_IN_CONTAINER=true
      - ASPNETCORE_URLS=http://*:80;https://*:443
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/certs/kinodev.crt
      - ASPNETCORE_Kestrel__Certificates__Default__KeyPath=/certs/kinodev.key
      - USE_SWAGGER=${UseSwagger}
      - Stripe__SecretKey=${Stripe__SecretKey}
      - Stripe__PublicKey=${Stripe__PublicKey}
      - MongoDB__ConnectionString=${MongoDB__ConnectionString}
      - MongoDB__DatabaseName=${MongoDB__DatabaseName}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.payment-service.rule=Host(`payment-service.kinodev.localhost`)"      
      - "traefik.http.routers.payment-service.entrypoints=websecure"
      - "traefik.http.routers.payment-service.tls=true"
      - "traefik.http.services.payment-service.loadbalancer.server.port=80"
    volumes:
      - ./certs:/certs:ro # Mount certs folder as read-only
    restart: always
    networks:
      - web

  identity:
    image: identity-service
    container_name: identity-service
    build:
      context: "E:/Education/KinoDev/KinoDev.identity"
      dockerfile: "E:/Education/KinoDev/KinoDev.identity/Dockerfile"
      args:
        - GITHUB_USER_NAME=${GITHUB_USER_NAME}
        - GITHUB_READ_PACKAGE_TOKEN=${GITHUB_READ_PACKAGE_TOKEN}
    env_file:
      - .env  
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - DOTNET_RUNNING_IN_CONTAINER=true
      - ASPNETCORE_URLS=http://*:80;https://*:443
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/certs/kinodev.crt
      - ASPNETCORE_Kestrel__Certificates__Default__KeyPath=/certs/kinodev.key
      - USE_SWAGGER=${UseSwagger}
      - ConnectionStrings__Identity=${ConnectionStrings__Identity}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.identity.rule=Host(`identity.kinodev.localhost`)"      
      - "traefik.http.routers.identity.entrypoints=websecure"
      - "traefik.http.routers.identity.tls=true"
      - "traefik.http.services.identity.loadbalancer.server.port=80"
    volumes:
      - ./certs:/certs:ro # Mount certs folder as read-only
    restart: always
    networks:
      - web

    # my-ui
  ui:
    image: ui
    container_name: ui
    build:
      context: "E:/Education/KinoDev/KinoDev.UI"
      dockerfile: "E:/Education/KinoDev/KinoDev.UI/Dockerfile"
      args:
        - ApiClients_IdentityServiceUri=${ApiClients__IdentityServiceUri}
        - ApiClients_ApiGatewayUri=${ApiClients__ApiGatewayUri}
        - Portals_Main=${Portals__Main}
        - Portals_Admin=${Portals__Admin}
        - NODE_ENV=development   
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ui.rule=Host(`ui.kinodev.localhost`)"
      - "traefik.http.routers.ui.entrypoints=websecure"
      - "traefik.http.routers.ui.tls=true"
      - "traefik.http.services.ui.loadbalancer.server.port=80"
      # Define the SPA middleware with a clear name
      - "traefik.http.middlewares.ui-spa.replacepathregex.regex=^/([^.]*|.+\\..+/.+)$$"
      - "traefik.http.middlewares.ui-spa.replacepathregex.replacement=/index.html"
      # Apply the middleware to the router (note the middleware name matches)
      - "traefik.http.routers.ui.middlewares=ui-spa@docker"  
    restart: always
    networks:
      - web
    volumes:
      - ./certs:/certs:ro # Mount certs folder as read-only    

  # admin-portal:
  #   image: ui
  #   container_name: admin-portal
  #   build:
  #     context: "E:/Education/KinoDev/KinoDev.UI"
  #     dockerfile: "E:/Education/KinoDev/KinoDev.UI/Dockerfile"
  #     args:
  #       - ApiClients_IdentityServiceUri=${ApiClients__IdentityServiceUri}
  #       - ApiClients_ApiGatewayUri=${ApiClients__ApiGatewayUri}
  #       - Portals_Main=${Portals__Main}
  #       - Portals_Admin=${Portals__Admin}
  #       - NODE_ENV=development  
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.admin-portal.rule=Host(`admin-portal.kinodev.localhost`)"
  #     - "traefik.http.routers.admin-portal.entrypoints=websecure"
  #     - "traefik.http.routers.admin-portal.tls=true"
  #     - "traefik.http.services.admin-portal.loadbalancer.server.port=80"
  #     # Define the SPA middleware with a clear name
  #     - "traefik.http.middlewares.ui-spa.replacepathregex.regex=^/([^.]*|.+\\..+/.+)$$"
  #     - "traefik.http.middlewares.ui-spa.replacepathregex.replacement=/index.html"
  #     # Apply the middleware to the router (note the middleware name matches)
  #     - "traefik.http.routers.admin-portal.middlewares=ui-spa@docker"  
  #   restart: always
  #   networks:
  #     - web
  #   volumes:
  #     - ./certs:/certs:ro # Mount certs folder as read-only      

networks:
  web:
    driver: bridge

volumes:
  rabbitmq-data: